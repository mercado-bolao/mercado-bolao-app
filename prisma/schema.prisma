generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  nome      String
  whatsapp  String    @unique
  senhaHash String?
  isAdmin   Boolean   @default(false)
  palpites  Palpite[]
}

model Concurso {
  id                 String    @id @default(cuid())
  nome               String?
  numero             Int
  dataInicio         DateTime
  dataFim            DateTime
  status             String
  premioEstimado     Float?
  fechamentoPalpites DateTime?
  bilhetes           Bilhete[]
  jogos              Jogo[]
  palpites           Palpite[]
}

model Jogo {
  id              String    @id @default(cuid())
  mandante        String
  visitante       String
  horario         DateTime
  resultado       String?
  placarCasa      Int?
  placarVisitante Int?
  statusJogo      String?
  tempoJogo       Int?
  fotoMandante    String?
  fotoVisitante   String?
  concursoId      String
  concurso        Concurso  @relation(fields: [concursoId], references: [id])
  palpites        Palpite[]
}

model Palpite {
  id         String        @id @default(uuid())
  nome       String
  whatsapp   String
  resultado  String
  valor      Float         @default(10.0)
  status     String        @default("pendente")
  jogoId     String
  concursoId String
  createdAt  DateTime      @default(now())
  userId     String?
  pixId      String?
  bilheteId  String?
  bilhete    Bilhete?      @relation("BilhetePalpites", fields: [bilheteId], references: [id])
  concurso   Concurso      @relation(fields: [concursoId], references: [id])
  jogo       Jogo          @relation(fields: [jogoId], references: [id], onDelete: Cascade)
  pix        PixPagamento? @relation(fields: [pixId], references: [id])
  user       User?         @relation(fields: [userId], references: [id])
}

model PixPagamento {
  id             String    @id @default(uuid())
  txid           String    @unique
  whatsapp       String
  valor          Float
  status         String    @default("ATIVA")
  pixCopiaECola  String
  pixLocationUrl String?
  imagemQrcode   String?
  locationId     String?
  ambiente       String?
  expiracao      DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bilhetes       Bilhete[]
  palpites       Palpite[]
}

model Bilhete {
  id                 String        @id @default(uuid())
  nome               String
  whatsapp           String
  concursoId         String
  quantidadePalpites Int
  valorTotal         Float
  status             String        @default("PENDENTE")
  txid               String?
  orderId            String?
  expiresAt          DateTime
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  pixId              String?
  ipAddress          String?
  userAgent          String?
  concurso           Concurso      @relation(fields: [concursoId], references: [id])
  pix                PixPagamento? @relation(fields: [pixId], references: [id])
  palpites           Palpite[]     @relation("BilhetePalpites")

  @@index([txid])
  @@index([orderId])
  @@index([status])
  @@index([concursoId])
}

model WebhookLog {
  id           String    @id @default(uuid())
  tipo         String
  txid         String?
  payload      String
  status       String
  errorMessage String?
  processedAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([txid])
  @@index([tipo])
}
