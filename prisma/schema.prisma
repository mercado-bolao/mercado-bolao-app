generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  nome      String
  whatsapp  String    @unique // ✅ Campo adicionado e definido como único
  senhaHash String?
  isAdmin   Boolean   @default(false)
  palpites  Palpite[]
}

model Concurso {
  id                    String    @id @default(cuid())
  nome                  String?   // Nome do concurso
  numero                Int
  dataInicio            DateTime
  dataFim               DateTime
  status                String
  premioEstimado        Float?    // Prêmio em R$
  fechamentoPalpites    DateTime? // Data/hora limite para apostas
  jogos                 Jogo[]
  palpites              Palpite[] // <- relação reversa com Palpite
}

model Jogo {
  id            String    @id @default(cuid())
  mandante      String
  visitante     String
  horario       DateTime
  resultado     String?
  placarCasa    Int?
  placarVisitante Int?
  statusJogo    String?
  tempoJogo     Int?
  fotoMandante  String?
  fotoVisitante String?
  concursoId    String
  concurso      Concurso  @relation(fields: [concursoId], references: [id])
  palpites      Palpite[]
}

model Palpite {
  id         String   @id @default(uuid())
  nome       String
  whatsapp   String
  resultado  String
  valor      Float    @default(10.0) // Valor fixo de R$ 10,00 por bilhete completo
  status     String   @default("pendente") // Status: pendente, pago, cancelado
  jogoId     String
  concursoId String
  createdAt  DateTime @default(now())
  concurso   Concurso @relation(fields: [concursoId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  jogo       Jogo     @relation(fields: [jogoId], references: [id], onDelete: Cascade)
  pixId      String?  // Relacionamento com PIX
  pix        PixPagamento? @relation(fields: [pixId], references: [id])
  bilheteId  String?  // Relacionamento com Bilhete
  bilhete    Bilhete? @relation("BilhetePalpites", fields: [bilheteId], references: [id])
}

model PixPagamento {
  id               String   @id @default(uuid())
  txid             String   @unique
  whatsapp         String
  valor            Float
  status           String   @default("ATIVA") // ATIVA, PAGA, EXPIRADA, CANCELADA
  pixCopiaECola    String   @db.Text
  pixLocationUrl   String?
  imagemQrcode     String?  @db.Text
  locationId       String?
  ambiente         String?  // sandbox ou producao
  expiracao        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  palpites         Palpite[]
  bilhetes         Bilhete[]
}

model Bilhete {
  id               String   @id @default(uuid())
  whatsapp         String
  nome             String
  valorTotal       Float
  quantidadePalpites Int
  status           String   @default("PENDENTE") // PENDENTE, PAGO, CANCELADO, EXPIRADO
  txid             String?
  orderId          String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relacionamentos
  pixId            String?
  pix              PixPagamento? @relation(fields: [pixId], references: [id])
  palpites         Palpite[] @relation("BilhetePalpites")
  
  @@index([txid])
  @@index([orderId])
  @@index([status])
}

model WebhookLog {
  id               String   @id @default(uuid())
  tipo             String   // "pix_payment", "pix_webhook", etc
  txid             String?
  payload          String   @db.Text
  status           String   // "SUCCESS", "ERROR", "PROCESSED"
  errorMessage     String?
  processedAt      DateTime?
  createdAt        DateTime @default(now())
  
  @@index([txid])
  @@index([tipo])
}